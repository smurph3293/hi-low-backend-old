AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    Bet management tool SAM Template

Globals:
    Function:
        Timeout: 20
        MemorySize: 512
        Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
          Variables:
            TABLE_NAME: !Ref BetsTable
            ENDPOINT_OVERRIDE: ""

Resources:
  AccessLogs:
    Type: AWS::Logs::LogGroup

  ApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"
  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: REGIONAL
      StageName: rc
      TracingEnabled: true
      Auth:
        DefaultAuthorizer: GatewayAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False # CORS: removes Authorizer from the automatically created OPTIONS methods
        Authorizers:
          GatewayAuthorizer:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt AuthFunction.Arn
            Identity:
              ReauthorizeEvery: 0
              Headers:
                - Authorization
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt: AccessLogs.Arn
        Format: $context.requestId
      Cors:
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,x-slyp-external-trace-id'"
        AllowMethods: "'DELETE,GET,OPTIONS,POST,PUT'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./nodejs/authorizer
      Handler: index.handler
      Runtime: nodejs12.x
      Tracing: Active
      Layers:
        - Ref: AuthDependenciesLayer

  AuthDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: authorizer-dependencies
      Description: All dependencies for bank authorizer
      ContentUri: ./nodejs/authorizer/dependencies/
      CompatibleRuntimes:
        - nodejs12.x
      RetentionPolicy: Delete

  GetBetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/aws-sam-java-rest-1.0.0.jar
      Handler: com.amazonaws.handler.GetBetHandler::handleRequest
      Runtime: java11
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BetsTable
      Events:
        GetBet:
          Type: Api
          Properties:
            RestApiId: !Ref MyApiGateway
            Path: /bets/{betXref}
            Method: get
      Events:
        GetBets:
          Type: Api
          Properties:
            RestApiId: !Ref MyApiGateway
            Path: /bets
            Method: get
  UpdateBetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/aws-sam-java-rest-1.0.0.jar
      Handler: com.amazonaws.handler.UpdateBetHandler::handleRequest
      Runtime: java11
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BetsTable
      Events:
        UpdateBet:
          Type: Api 
          Properties:
            RestApiId: !Ref MyApiGateway
            Path: /bets/{betXref}
            Method: post
  DeleteBetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/aws-sam-java-rest-1.0.0.jar
      Handler: com.amazonaws.handler.DeleteBetHandler::handleRequest
      Runtime: java11
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BetsTable
      Events:
        DeleteBet:
          Type: Api
          Properties:
            RestApiId: !Ref MyApiGateway
            Path: /bets/{betXref}
            Method: delete
  CreateBetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/aws-sam-java-rest-1.0.0.jar
      Handler: com.amazonaws.handler.CreateBetHandler::handleRequest
      Runtime: java11
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BetsTable
      Events:
        CreateBet:
          Type: Api
          Properties:
            RestApiId: !Ref MyApiGateway
            Path: /bets
            Method: post

  BetsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: bet
      AttributeDefinitions:
        - AttributeName: betXref
          AttributeType: S
      KeySchema:
        - AttributeName: betXref
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

Outputs:
    BetApi:
      Description: "API Gateway endpoint URL for rc stage for get bets function"
      Value: !Sub "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/rc/bets/"

    AuthFunction:
      Description: "AuthFunction Lambda Function ARN"
      Value: !GetAtt AuthFunction.Arn
    
    GetBetFunction:
      Description: "GetBet Lambda Function ARN"
      Value: !GetAtt GetBetFunction.Arn

    GetBetsFunction:
      Description: "GetBets Lambda Function ARN"
      Value: !GetAtt GetBetsFunction.Arn

    UpdateBetFunction:
      Description: "UpdateBet Lambda Function ARN"
      Value: !GetAtt UpdateBetFunction.Arn

    DeleteBetFunction:
      Description: "DeleteBet Lambda Function ARN"
      Value: !GetAtt DeleteBetFunction.Arn

    CreateBetFunction:
      Description: "CreateBet Lambda Function ARN"
      Value: !GetAtt CreateBetFunction.Arn
